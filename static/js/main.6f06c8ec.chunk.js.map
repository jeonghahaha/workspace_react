{"version":3,"sources":["store.js","components/AddNumber.jsx","components/AddNumberRoot.jsx","components/DisplayNumber.jsx","components/DisplayNumberRoot.jsx","App.js","serviceWorker.js","index.js"],"names":["createStore","state","action","undefined","number","value","data","CreatedTime","Value","type","size","window","__REDUX_DEVTOOLS_EXTENSION__","AddNumber","onClick","store","dispatch","this","bind","onChange","e","setState","Number","target","Component","AddNumberRoot","DisplayNumber","props","getState","subscribe","readOnly","DisplayNumberRoot","App","onMessageReceive","msg","topic","msg_v","prevState","messages","clientConnected","className","url","topics","onMessage","ref","client","clientRef","onConnect","onDisconnect","debug","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","stroke","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6f06c8ec.chunk.js","sourcesContent":["import {createStore} from 'redux';\r\n\r\nexport default createStore(function(state, action){\r\n    if(state === undefined){\r\n        return {\r\n            number:0, \r\n            value:0, \r\n            data:{\r\n                CreatedTime: null,\r\n                Value:null\r\n            }\r\n        }\r\n    }\r\n    if(action.type === 'INCREMENT'){\r\n        return {...state, number:state.number + action.size}\r\n    }\r\n\r\n    if(action.type === 'TOPIC'){\r\n        return {\r\n            ...state, \r\n            value:state.value + action.value, \r\n            data:action.data\r\n        }\r\n    }\r\n\r\n    return state;\r\n}, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n","import React, { Component } from \"react\";\r\nimport store from \"../store\";\r\n\r\nexport default class AddNumber extends Component {\r\n  state = {size:1}\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Add Number</h1>\r\n        <input type=\"button\" value=\"+\" onClick={function(){\r\n          store.dispatch({type:'INCREMENT', size:this.state.size});\r\n        }.bind(this)}></input>\r\n        <input type=\"text\" value={this.state.size} onChange={function(e){\r\n          this.setState({size:Number(e.target.value)});\r\n        }.bind(this)}></input>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport AddNumber from \"../components/AddNumber\";\r\n\r\nexport default class AddNumberRoot extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Add Number Root</h1>\r\n        <AddNumber></AddNumber>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport store from \"../store\";\r\n\r\nexport default class DisplayNumber extends Component {\r\n  state = { number: store.getState().number }\r\n  constructor(props){\r\n      super(props);\r\n      store.subscribe(function(){\r\n        this.setState({number:store.getState().number});\r\n      }.bind(this));\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Display Number</h1>\r\n        <input type=\"text\" value={this.state.number} readOnly></input>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\nimport DisplayNumber from \"../components/DisplayNumber\";\r\n\r\nexport default class DisplayNumberRoot extends Component{\r\n    render(){\r\n      return (\r\n        <div>\r\n          <h1>Display Number Root</h1>\r\n          <DisplayNumber></DisplayNumber>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n","import { render } from '@testing-library/react';\r\nimport React, {Component} from 'react';\r\nimport './App.css';\r\nimport AddNumberRoot from \"./components/AddNumberRoot\";\r\nimport DisplayNumberRoot from \"./components/DisplayNumberRoot\";\r\nimport SockJsClient from \"react-stomp\";\r\nimport Fetch from \"json-fetch\";\r\nimport randomstring from \"randomstring\";\r\nimport store from \"./store\";\r\nimport { LineChart, Line, YAxis, XAxis, CartesianGrid, Tooltip, Legend } from \"recharts\";\r\n\r\nclass App extends Component {\r\n  state = {number:0}\r\n\r\n  state = { value: store.getState().value }\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      clientConnected:false,\r\n      messages:[],\r\n      msg_v:{\r\n        CreatedTime: null,\r\n        Value:null\r\n      }\r\n    };\r\n\r\n    store.subscribe(function(){\r\n      this.setState({value:store.getState().value});\r\n    }.bind(this));\r\n  }\r\n\r\n  onMessageReceive = (msg, topic) => {\r\n    store.dispatch({\r\n      type:'TOPIC', \r\n      value:Number(this.state.msg_v.Value),\r\n      data:this.state.msg_v\r\n    });\r\n\r\n    this.setState(prevState => ({\r\n      messages: [...prevState.messages, msg],\r\n      msg_v:msg\r\n    }));\r\n  }\r\n  \r\n  render(){\r\n    const wsSourceUrl = \"http://221.144.71.121:8765/api/timecheck/live\";\r\n    \r\n    const {CreatedTime, Value} = this.state.msg_v;\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Root</h1>\r\n        <AddNumberRoot></AddNumberRoot>\r\n        <DisplayNumberRoot></DisplayNumberRoot>\r\n\r\n        <SockJsClient url={ wsSourceUrl } topics={[\"/topic/test\"]}\r\n        onMessage={ this.onMessageReceive } ref= { (client) => {this.clientRef = client }}\r\n        onConnect = { () => {this.setState({ clientConnected: true })}}\r\n        onDisconnect= { () => { this.setState({ clientConnected: false })}}\r\n        debug={ false }></SockJsClient>\r\n\r\n        <h2>CreatedTime : {CreatedTime}</h2>\r\n        <h2>Value : {this.state.value}</h2>\r\n        <LineChart width={730} height={250} data={this.state.messages}\r\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"CreatedTime\" />\r\n            <YAxis dataKey=\"Value\"/>\r\n            <Tooltip />\r\n            <Legend />\r\n            <Line type=\"monotone\" dataKey=\"Value\" stroke=\"#0095FF\" />\r\n        </LineChart>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}